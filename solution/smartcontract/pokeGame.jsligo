
export type pokeMessage = {
    receiver : address,
    feedback : string
};

export type storage = {
    pokeTraces : map<address, pokeMessage>,
    feedback : string
};

export type return_ = [list<operation>, storage];

type returned_feedback = [address, string]; //address that gives feedback and a string message

type oracle_param = contract<returned_feedback>;

export type parameter =
| ["Poke"]
| ["PokeAndGetFeedback", address]
//| ["PokeAndGetFeedbackCallback", returned_feedback]
//| ["GetFeedback",oracle_param]
;

const poke = (store : storage) : return_ => {
    let feedbackMessage = {receiver : Tezos.self_address ,feedback: ""};
    return [  list([]) as list<operation>, {...store, 
        pokeTraces : Map.add(Tezos.source, feedbackMessage, store.pokeTraces) }]; 
};

// @no_mutation
const pokeAndGetFeedback = ([oracleAddress,store]:[address,storage]) : return_ => {
  //Read the feedback view
  let feedbackOpt : option<string> = Tezos.call_view("feedback", unit, oracleAddress);

  match( feedbackOpt , {
    Some : (feedback : string) => {
        let feedbackMessage = {receiver : oracleAddress ,feedback: feedback};
        return [  list([]) as list<operation>, {...store, 
          pokeTraces : Map.add(Tezos.source, feedbackMessage , store.pokeTraces) }]; 
        }, 
    None : () => failwith("Cannot find view feedback on given oracle address")
  });
};

/*
const pokeAndGetFeedbackCallback = ([feedback,store] : [returned_feedback , storage]) : return_ => {
    let feedbackMessage = {receiver : feedback[0] ,feedback: feedback[1]};
    return [  list([]) as list<operation>, {...store, 
        pokeTraces : Map.add(Tezos.source, feedbackMessage , store.pokeTraces) }]; 
};


const getFeedback = ([contract_callback,store] : [contract<returned_feedback>,storage]): return_ => {
    let op : operation = Tezos.transaction(
            [Tezos.self_address,store.feedback], 
            (0 as mutez),
            contract_callback);   
    return [list([op]) ,store];
};
*/

/* Main access point that dispatches to the entrypoints according to
the smart contract parameter. */
export const main = ([action, store] : [parameter, storage]) : return_ => {
    return match (action, {
        Poke: () => poke(store),
        PokeAndGetFeedback: (other : address) => pokeAndGetFeedback(other,store),
       // PokeAndGetFeedbackCallback: (feedback : returned_feedback) => pokeAndGetFeedbackCallback(feedback,store),
       //  GetFeedback: (contract_callback: oracle_param)=> getFeedback(contract_callback,store)
    } 
    )
};

// @view
const feedback = ([_, store] : [unit, storage]) : string => { return store.feedback };
